--- coders/xcf.c.orig	2019-07-06 00:47:40.292551200 +0200
+++ coders/xcf.c	2019-07-06 01:23:27.869386800 +0200
@@ -60,6 +60,7 @@
 #include "magick/resource_.h"
 #include "magick/static.h"
 #include "magick/string_.h"
+#include "magick/string-private.h"
 #include "magick/module.h"
 
 /*
@@ -112,6 +113,7 @@
 typedef struct
 {
   size_t
+    version,
     width,
     height,
     image_type,
@@ -212,26 +214,69 @@
 
 typedef enum
 {
-  GIMP_NORMAL_MODE,
-  GIMP_DISSOLVE_MODE,
-  GIMP_BEHIND_MODE,
-  GIMP_MULTIPLY_MODE,
-  GIMP_SCREEN_MODE,
-  GIMP_OVERLAY_MODE,
-  GIMP_DIFFERENCE_MODE,
-  GIMP_ADDITION_MODE,
-  GIMP_SUBTRACT_MODE,
-  GIMP_DARKEN_ONLY_MODE,
-  GIMP_LIGHTEN_ONLY_MODE,
-  GIMP_HUE_MODE,
-  GIMP_SATURATION_MODE,
-  GIMP_COLOR_MODE,
-  GIMP_VALUE_MODE,
-  GIMP_DIVIDE_MODE,
-  GIMP_DODGE_MODE,
-  GIMP_BURN_MODE,
-  GIMP_HARDLIGHT_MODE
-} GimpLayerModeEffects;
+  GIMP_LAYER_MODE_NORMAL_LEGACY,
+  GIMP_LAYER_MODE_DISSOLVE,
+  GIMP_LAYER_MODE_BEHIND_LEGACY,
+  GIMP_LAYER_MODE_MULTIPLY_LEGACY,
+  GIMP_LAYER_MODE_SCREEN_LEGACY,
+  GIMP_LAYER_MODE_OVERLAY_LEGACY,
+  GIMP_LAYER_MODE_DIFFERENCE_LEGACY,
+  GIMP_LAYER_MODE_ADDITION_LEGACY,
+  GIMP_LAYER_MODE_SUBTRACT_LEGACY,
+  GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY,
+  GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY,
+  GIMP_LAYER_MODE_HSV_HUE_LEGACY,
+  GIMP_LAYER_MODE_HSV_SATURATION_LEGACY,
+  GIMP_LAYER_MODE_HSL_COLOR_LEGACY,
+  GIMP_LAYER_MODE_HSV_VALUE_LEGACY,
+  GIMP_LAYER_MODE_DIVIDE_LEGACY,
+  GIMP_LAYER_MODE_DODGE_LEGACY,
+  GIMP_LAYER_MODE_BURN_LEGACY,
+  GIMP_LAYER_MODE_HARDLIGHT_LEGACY,
+  GIMP_LAYER_MODE_SOFTLIGHT_LEGACY,
+  GIMP_LAYER_MODE_GRAIN_EXTRACT_LEGACY,
+  GIMP_LAYER_MODE_GRAIN_MERGE_LEGACY,
+  GIMP_LAYER_MODE_COLOR_ERASE_LEGACY,
+  GIMP_LAYER_MODE_OVERLAY,
+  GIMP_LAYER_MODE_LCH_HUE,
+  GIMP_LAYER_MODE_LCH_CHROMA,
+  GIMP_LAYER_MODE_LCH_COLOR,
+  GIMP_LAYER_MODE_LCH_LIGHTNESS,
+  GIMP_LAYER_MODE_NORMAL,
+  GIMP_LAYER_MODE_BEHIND,
+  GIMP_LAYER_MODE_MULTIPLY,
+  GIMP_LAYER_MODE_SCREEN,
+  GIMP_LAYER_MODE_DIFFERENCE,
+  GIMP_LAYER_MODE_ADDITION,
+  GIMP_LAYER_MODE_SUBTRACT,
+  GIMP_LAYER_MODE_DARKEN_ONLY,
+  GIMP_LAYER_MODE_LIGHTEN_ONLY,
+  GIMP_LAYER_MODE_HSV_HUE,
+  GIMP_LAYER_MODE_HSV_SATURATION,
+  GIMP_LAYER_MODE_HSL_COLOR,
+  GIMP_LAYER_MODE_HSV_VALUE,
+  GIMP_LAYER_MODE_DIVIDE,
+  GIMP_LAYER_MODE_DODGE,
+  GIMP_LAYER_MODE_BURN,
+  GIMP_LAYER_MODE_HARDLIGHT,
+  GIMP_LAYER_MODE_SOFTLIGHT,
+  GIMP_LAYER_MODE_GRAIN_EXTRACT,
+  GIMP_LAYER_MODE_GRAIN_MERGE,
+  GIMP_LAYER_MODE_VIVID_LIGHT,
+  GIMP_LAYER_MODE_PIN_LIGHT,
+  GIMP_LAYER_MODE_LINEAR_LIGHT,
+  GIMP_LAYER_MODE_HARD_MIX,
+  GIMP_LAYER_MODE_EXCLUSION,
+  GIMP_LAYER_MODE_LINEAR_BURN,
+  GIMP_LAYER_MODE_LUMA_DARKEN_ONLY,
+  GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY,
+  GIMP_LAYER_MODE_LUMINANCE,
+  GIMP_LAYER_MODE_COLOR_ERASE,
+  GIMP_LAYER_MODE_ERASE,
+  GIMP_LAYER_MODE_MERGE,
+  GIMP_LAYER_MODE_SPLIT,
+  GIMP_LAYER_MODE_PASS_THROUGH,
+} GimpLayerMode;
 
 /*
   Simple utility routine to convert between PSD blending modes and
@@ -242,27 +287,62 @@
 {
   switch ( blendMode )
   {
-    case GIMP_NORMAL_MODE:       return(OverCompositeOp);
-    case GIMP_DISSOLVE_MODE:     return(DissolveCompositeOp);
-    case GIMP_MULTIPLY_MODE:     return(MultiplyCompositeOp);
-    case GIMP_SCREEN_MODE:       return(ScreenCompositeOp);
-    case GIMP_OVERLAY_MODE:      return(OverlayCompositeOp);
-    case GIMP_DIFFERENCE_MODE:   return(DifferenceCompositeOp);
-    case GIMP_ADDITION_MODE:     return(ModulusAddCompositeOp);
-    case GIMP_SUBTRACT_MODE:     return(ModulusSubtractCompositeOp);
-    case GIMP_DARKEN_ONLY_MODE:  return(DarkenCompositeOp);
-    case GIMP_LIGHTEN_ONLY_MODE: return(LightenCompositeOp);
-    case GIMP_HUE_MODE:          return(HueCompositeOp);
-    case GIMP_SATURATION_MODE:   return(SaturateCompositeOp);
-    case GIMP_COLOR_MODE:        return(ColorizeCompositeOp);
-    case GIMP_DODGE_MODE:        return(ColorDodgeCompositeOp);
-    case GIMP_BURN_MODE:         return(ColorBurnCompositeOp);
-    case GIMP_HARDLIGHT_MODE:    return(HardLightCompositeOp);
-    case GIMP_DIVIDE_MODE:       return(DivideDstCompositeOp);
+    case GIMP_LAYER_MODE_NORMAL_LEGACY:
+    case GIMP_LAYER_MODE_NORMAL:
+      return(OverCompositeOp);
+    case GIMP_LAYER_MODE_DISSOLVE:
+      return(DissolveCompositeOp);
+    case GIMP_LAYER_MODE_MULTIPLY_LEGACY:
+    case GIMP_LAYER_MODE_MULTIPLY:
+      return(MultiplyCompositeOp);
+    case GIMP_LAYER_MODE_SCREEN_LEGACY:
+    case GIMP_LAYER_MODE_SCREEN:
+      return(ScreenCompositeOp);
+    case GIMP_LAYER_MODE_OVERLAY_LEGACY:
+    case GIMP_LAYER_MODE_OVERLAY:
+      return(OverlayCompositeOp);
+    case GIMP_LAYER_MODE_DIFFERENCE_LEGACY:
+    case GIMP_LAYER_MODE_DIFFERENCE:
+      return(DifferenceCompositeOp);
+    case GIMP_LAYER_MODE_ADDITION_LEGACY:
+    case GIMP_LAYER_MODE_ADDITION:
+      return(ModulusAddCompositeOp);
+    case GIMP_LAYER_MODE_SUBTRACT_LEGACY:
+    case GIMP_LAYER_MODE_SUBTRACT:
+      return(ModulusSubtractCompositeOp);
+    case GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY:
+    case GIMP_LAYER_MODE_DARKEN_ONLY:
+    case GIMP_LAYER_MODE_LUMA_DARKEN_ONLY:
+      return(DarkenCompositeOp);
+    case GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY:
+    case GIMP_LAYER_MODE_LIGHTEN_ONLY:
+      return(LightenCompositeOp);
+    case GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY:
+      return(LightenCompositeOp);
+    case GIMP_LAYER_MODE_HSV_HUE_LEGACY:
+    case GIMP_LAYER_MODE_HSV_HUE:
+      return(HueCompositeOp);
+    case GIMP_LAYER_MODE_HSV_SATURATION_LEGACY:
+    case GIMP_LAYER_MODE_HSV_SATURATION:
+      return(SaturateCompositeOp);
+    case GIMP_LAYER_MODE_HSL_COLOR_LEGACY:
+    case GIMP_LAYER_MODE_HSL_COLOR:
+      return(ColorizeCompositeOp);
+    case GIMP_LAYER_MODE_DODGE_LEGACY:
+    case GIMP_LAYER_MODE_DODGE:
+      return(ColorDodgeCompositeOp);
+    case GIMP_LAYER_MODE_BURN_LEGACY:
+    case GIMP_LAYER_MODE_BURN:
+      return(ColorBurnCompositeOp);
+    case GIMP_LAYER_MODE_HARDLIGHT_LEGACY:
+    case GIMP_LAYER_MODE_HARDLIGHT:
+      return(HardLightCompositeOp);
+    case GIMP_LAYER_MODE_DIVIDE_LEGACY:
+    case GIMP_LAYER_MODE_DIVIDE:
+      return(DivideDstCompositeOp);
     /* these are the ones we don't support...yet */
-    case GIMP_BEHIND_MODE:       return(OverCompositeOp);
-    case GIMP_VALUE_MODE:        return(OverCompositeOp);
-    default:                     return(OverCompositeOp);
+    default:
+      return(OverCompositeOp);
   }
 }
 
@@ -331,6 +411,14 @@
   return(string);
 }
 
+static MagickOffsetType GetXCFOffset(Image *image, XCFDocInfo *inDocInfo)
+{
+  if (inDocInfo->version >= 4)
+    return (MagickOffsetType) ReadBlobMSBLongLong(image);
+  else
+    return (MagickOffsetType) ReadBlobMSBLong(image);
+}
+
 static MagickBooleanType load_tile(Image *image,Image *tile_image,
   XCFDocInfo *inDocInfo,XCFLayerInfo *inLayerInfo,size_t data_length,
   ExceptionInfo *exception)
@@ -638,7 +726,7 @@
     Read in the first tile offset.  If it is '0', then this tile level is empty
     and we can simply return.
   */
-  offset=(MagickOffsetType) ReadBlobMSBLong(image);
+  offset=GetXCFOffset(image,inDocInfo);
   if (EOFBlob(image) != MagickFalse)
     ThrowBinaryException(CorruptImageError,"UnexpectedEndOfFile", 
       image->filename);
@@ -661,7 +749,7 @@
     saved_pos=TellBlob(image);
     /* read in the offset of the next tile so we can calculate the amount
        of data needed for this tile*/
-    offset2=(MagickOffsetType) ReadBlobMSBLong(image);
+    offset2=GetXCFOffset(image,inDocInfo);
     if ((MagickSizeType) offset2 >= inDocInfo->file_size)
       ThrowBinaryException(CorruptImageError,"InsufficientImageDataInFile",
         image->filename);
@@ -734,7 +822,7 @@
        */
       offset=SeekBlob(image, saved_pos, SEEK_SET);
       /* read in the offset of the next tile */
-      offset=(MagickOffsetType) ReadBlobMSBLong(image);
+      offset=GetXCFOffset(image,inDocInfo);
     }
   if (offset != 0)
     ThrowBinaryException(CorruptImageError,"CorruptImage",image->filename)
@@ -757,7 +845,7 @@
    *  calculated when the TileManager was created is the same
    *  as the number of levels found in the file.
    */
-  offset=(MagickOffsetType) ReadBlobMSBLong(image);  /* top level */
+  offset=GetXCFOffset(image,inDocInfo);  /* top level */
   if ((MagickSizeType) offset >= GetBlobSize(image))
     ThrowBinaryImageException(CorruptImageError,"InsufficientImageDataInFile",
       image->filename);
@@ -811,7 +899,7 @@
   unsigned int
     foundPropEnd = 0;
 
-  size_t
+  MagickOffsetType
     hierarchy_offset,
     layer_mask_offset;
 
@@ -971,12 +1059,12 @@
     }
 
   /* read the hierarchy and layer mask offsets */
-  hierarchy_offset = ReadBlobMSBLong(image);
-  layer_mask_offset = ReadBlobMSBLong(image);
+  hierarchy_offset = GetXCFOffset(image,inDocInfo);
+  layer_mask_offset = GetXCFOffset(image,inDocInfo);
 
   /* read in the hierarchy */
-  offset=SeekBlob(image, (MagickOffsetType) hierarchy_offset, SEEK_SET);
-  if (offset != (MagickOffsetType) hierarchy_offset)
+  offset=SeekBlob(image, hierarchy_offset, SEEK_SET);
+  if (offset != hierarchy_offset)
     ThrowBinaryImageException(CorruptImageError,"InvalidImageHeader",
       image->filename);
   if (load_hierarchy (image, inDocInfo, outLayer) == 0)
@@ -1066,6 +1154,7 @@
 
   size_t
     image_type,
+    precision,
     length;
 
   ssize_t
@@ -1091,17 +1180,29 @@
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
-  count=ReadBlob(image,14,(unsigned char *) magick);
-  if ((count != 14) ||
+  count=ReadBlob(image,sizeof(magick),(unsigned char *) magick);
+  if ((count != sizeof(magick)) ||
       (LocaleNCompare((char *) magick,"gimp xcf",8) != 0))
     ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   (void) memset(&doc_info,0,sizeof(XCFDocInfo));
   doc_info.exception=exception;
+  doc_info.version=StringToUnsignedLong(magick+10);
   doc_info.width=ReadBlobMSBLong(image);
   doc_info.height=ReadBlobMSBLong(image);
   if ((doc_info.width > 262144) || (doc_info.height > 262144))
     ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   doc_info.image_type=ReadBlobMSBLong(image);
+    if (doc_info.version >= 4) {
+    precision=ReadBlobMSBLong(image);
+    if (precision == 0) {
+      precision = 150;
+    }
+  }
+  else {
+    precision=150;
+  }
+  if (precision != 150)
+    ThrowReaderException(CoderError,"ColorPrecisionNotSupported");
   /*
     Initialize image attributes.
   */
@@ -1331,7 +1432,7 @@
       */
       do
       {
-        ssize_t offset = ReadBlobMSBSignedLong(image);
+        MagickOffsetType offset = GetXCFOffset(image,&doc_info);
         if (offset == 0)
           foundAllLayers=MagickTrue;
         else
@@ -1366,7 +1467,7 @@
         saved_pos;
 
       /* read in the offset of the next layer */
-      offset=(MagickOffsetType) ReadBlobMSBLong(image);
+      offset=GetXCFOffset(image,&doc_info);
       /* if the offset is 0 then we are at the end
       *  of the layer list.
       */
