<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
  - This file is part of Natron <https://natrongithub.github.io/>,
  - Copyright (C) 2013-2018 INRIA and Alexandre Gauthier-Foichat
  - Copyright (C) 2018-2020 The Natron developers
  -
  - Natron is free software: you can redistribute it and/or modify
  - it under the terms of the GNU General Public License as published by
  - the Free Software Foundation; either version 2 of the License, or
  - (at your option) any later version.
  -
  - Natron is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU General Public License for more details.
  -
  - You should have received a copy of the GNU General Public License
  - along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>
   - ***** END LICENSE BLOCK ***** -->
<typesystem package="NatronGui">

    <!--Load QtCore typesystem-->
    <load-typesystem name="typesystem_core.xml" generate="no" />
    <!--Load QtGui typesystem-->
    <load-typesystem name="typesystem_gui.xml" generate="no" />
    <!--Load QtWidgets typesystem-->
    <load-typesystem name="typesystem_widgets.xml" generate="no" />
    <!--Load Engine typesystem-->
    <load-typesystem name="typesystem2_engine.xml" generate="no" />

    <namespace-type name="Natron" generate="no">
    <!--Enumerations already in Engine typesystem-->
    <!--
    <enum-type name="StatusEnum"/>
    <enum-type name="MergingFunctionEnum"/>
    <enum-type name="StandardButtonEnum" flags="StandardButtons"/>
    <enum-type name="KeyframeTypeEnum"/>
    <enum-type name="PixmapEnum"/>
    <enum-type name="ValueChangedReasonEnum"/>
    <enum-type name="AnimationLevelEnum"/>
    <enum-type name="ImageBitDepthEnum"/>
    <enum-type name="ImagePremultiplicationEnum"/>
    <enum-type name="ViewerCompositingOperatorEnum"/>
    <enum-type name="ViewerColorSpaceEnum"/>
    <enum-type name="OrientationEnum"/>
    <enum-type name="PlaybackModeEnum"/>
    <enum-type name="DisplayChannelsEnum"/>

    <enum-type name="TimelineStateEnum"/>
    <enum-type name="TimelineChangeReasonEnum"/>
    <enum-type name="MessageTypeEnum"/>
    <enum-type name="ImagePlaneDescEnum"/>
    <enum-type name="ImageFieldingOrderEnum"/>
    <enum-type name="SequentialPreferenceEnum"/>
    <enum-type name="StorageModeEnum"/>
    <enum-type name="SchedulingPolicyEnum"/>
    <enum-type name="ContextEnum"/>
    <enum-type name="RotoStrokeType"/>
    <enum-type name="RenderSafetyEnum"/>
    <enum-type name="PenType"/>
    <enum-type name="PluginOpenGLRenderSupport"/>
    <enum-type name="CurveChangeReason"/>
    <enum-type name="OpenGLRequirementsTypeEnum"/>
    <enum-type name="DopeSheetItemType"/>
    <enum-type name="CreateNodeReason"/>
    <enum-type name="KnobClipBoardType"/>
    <enum-type name="ValueIsNormalizedEnum"/>
    <enum-type name="CursorEnum"/>
    <enum-type name="Key"/>
    <enum-type name="KeyboardModifierEnum"/>
    <enum-type name="AppInstanceStatusEnum"/>
    <enum-type name="ScaleTypeEnum"/>
    -->
    <modify-function signature="operator!=(Natron::RectD,Natron::RectD)" remove="all"/>
    <modify-function signature="operator!=(Natron::RectI,Natron::RectI)" remove="all"/>
    <modify-function signature="operator==(Natron::RectD,Natron::RectD)" remove="all"/>
    <modify-function signature="operator==(Natron::RectI,Natron::RectI)" remove="all"/>
    <modify-function signature="getAmountFreePhysicalRAM()" remove="all"/>
    <modify-function signature="isApplication32Bits()" remove="all"/>
    <modify-function signature="isFailureRetCode(Natron::StatusEnum)" remove="all"/>
    <!-- </namespace-type> -->

    <namespace-type name="Python" generate="no">
        <modify-function signature="PyStringToStdString(PyObject*)" remove="all"/>
        <modify-function signature="getFunctionArguments(const std::string&amp;, std::string*, std::vector&lt;std::string&gt;*)" remove="all"/>
        <modify-function signature="getAttrRecursive(const std::string&amp;, PyObject*, bool*)" remove="all"/>
        <modify-function signature="getGroupInfos(std::string,std::string,std::string*,std::string*,std::string*,std::string*,std::string*,bool*,uint*)" remove="all"/>
        <modify-function signature="interpretPythonScript(std::string, std::string*, std::string*)" remove="all"/>
        <modify-function signature="getMainModule()" remove="all"/>
        <modify-function signature="makeNameScriptFriendly(std::string)" remove="all"/>
        <modify-function signature="makeNameScriptFriendlyWithDots(std::string)" remove="all"/>

    <object-type name="GuiApp">
        <modify-function signature="getTabWidget(QString)const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getActiveTabWidget()const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="getSelectedNodes(Natron::Python::Group*)const">
            <inject-code class="target" position="beginning">
                std::list&lt;Natron::Python::Effect*&gt; effects = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                PyObject* ret = PyList_New((int) effects.size());
                int idx = 0;
                for (std::list&lt;Natron::Python::Effect*&gt;::iterator it = effects.begin(); it!=effects.end(); ++it,++idx) {
                PyObject* item = %CONVERTTOPYTHON[Natron::Python::Effect*](*it);
                // Ownership transferences.
                Shiboken::Object::getOwnership(item);
                PyList_SET_ITEM(ret, idx, item);
                }
                return ret;
            </inject-code>
        </modify-function>
        <modify-function signature="getViewer(QString)const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getActiveViewer()const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="renderBlocking(std::list&lt;Natron::Python::Effect*&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;)">
            <modify-argument index="1">
                <replace-type modified-type="PyList"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
            </modify-argument>
            <inject-code class="target" position="beginning">
                if (!PyList_Check(%PYARG_1)) {
                PyErr_SetString(PyExc_TypeError, "tasks must be a list of tuple objects.");
                return 0;
                }
                std::list&lt;Natron::Python::Effect*&gt; effects;
                
                std::list&lt;int&gt; firstFrames;
                
                std::list&lt;int&gt; lastFrames;
                
                std::list&lt;int&gt; frameSteps;
                
                int size = (int)PyList_GET_SIZE(%PYARG_1);
                for (int i = 0; i &lt; size; ++i) {
                PyObject* tuple = PyList_GET_ITEM(%PYARG_1,i);
                if (!tuple) {
                PyErr_SetString(PyExc_TypeError, "tasks must be a list of tuple objects.");
                return 0;
                }
                
                int tupleSize = PyTuple_GET_SIZE(tuple);
                if (tupleSize != 4 &amp;&amp; tupleSize != 3) {
                PyErr_SetString(PyExc_TypeError, "the tuple must have 3 or 4 items.");
                return 0;
                }
                Natron::Python::Effect* writeNode = %CONVERTTOCPP[Natron::Python::Effect*](PyTuple_GET_ITEM(tuple, 0));
                int firstFrame = %CONVERTTOCPP[int](PyTuple_GET_ITEM(tuple, 1));
                int lastFrame = %CONVERTTOCPP[int](PyTuple_GET_ITEM(tuple, 2));
                int frameStep;
                if (tupleSize == 4) {
                frameStep = %CONVERTTOCPP[int](PyTuple_GET_ITEM(tuple, 3));
                } else {
                frameStep = INT_MIN;
                }
                effects.push_back(writeNode);
                firstFrames.push_back(firstFrame);
                lastFrames.push_back(lastFrame);
                frameSteps.push_back(frameStep);
                }
                
                %CPPSELF.%FUNCTION_NAME(effects,firstFrames,lastFrames, frameSteps);
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="PyViewer">
        <modify-function signature="getFrameRange(int*,int*)const">
            <modify-argument index="return">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <inject-code class="target" position="beginning">
                int x,y;
                %CPPSELF.%FUNCTION_NAME(&amp;x,&amp;y);
                %PYARG_0 = PyTuple_New(2);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[int](x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[int](y));
                return %PYARG_0;
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="PyGuiApplication">
        <modify-function signature="getGuiInstance(int)const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>

    </object-type>

	<object-type name="PyModalDialog">
        <modify-function signature="getParam(QString)const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
	</object-type>
    
    <object-type name="PyPanel">
        <modify-function signature="getParam(QString)const">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getParams()const">
            <inject-code class="target" position="beginning">
                std::list&lt;Natron::Python::Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                PyObject* ret = PyList_New((int) params.size());
                int idx = 0;
                for (std::list&lt;Natron::Python::Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
                PyObject* item = %CONVERTTOPYTHON[Natron::Python::Param*](*it);
                // Ownership transferences.
                Shiboken::Object::getOwnership(item);
                PyList_SET_ITEM(ret, idx, item);
                }
                return ret;
            </inject-code>
        </modify-function>
        <modify-function signature="save_serialization_thread()const" remove="all"/>
    </object-type>
    
    <object-type name="PyTabWidget">
        <modify-function signature="splitHorizontally()">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="splitVertically()">
            <modify-argument index="return">
                <define-ownership class="target" owner="target"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="appendTab(Natron::Python::PyPanel*)">
            <inject-code class="target" position="beginning">
                %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1);
                %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
            </inject-code>
        </modify-function>
        <modify-function signature="insertTab(int,Natron::Python::PyPanel*)">
            <inject-code class="target" position="beginning">
                %CPPSELF.%FUNCTION_NAME(%1,%2);
            </inject-code>
        </modify-function>
    </object-type>
  </namespace-type>
  </namespace-type>
</typesystem>
